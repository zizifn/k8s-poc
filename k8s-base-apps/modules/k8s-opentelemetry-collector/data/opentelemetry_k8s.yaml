receivers:
  # file log will take disk, disable for now
  # filelog:
  #   include:
  #     - /var/log/pods/default*/*/*.log
  #   exclude:
  #     # Exclude logs from all containers named otel-collector
  #     - /var/log/pods/*/*otel*/*.log
  #     - /var/log/pods/*/*agent*/*.log
  #     - /var/log/pods/*elastic*/*/*.log
  #   start_at: beginning
  #   include_file_path: true
  #   include_file_name: false
  #   operators:
      # Find out which format is used by kubernetes
      - type: router
        id: get-format
        routes:
          - output: parser-docker
            expr: 'body matches "^\\{"'
          - output: parser-crio
            expr: 'body matches "^[^ Z]+ "'
          - output: parser-containerd
            expr: 'body matches "^[^ Z]+Z"'
      # Parse CRI-O format
      - type: regex_parser
        id: parser-crio
        regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
        output: extract_metadata_from_filepath
        timestamp:
          parse_from: attributes.time
          layout_type: gotime
          layout: '2006-01-02T15:04:05.000000000-07:00'
      # Parse CRI-Containerd format
      - type: regex_parser
        id: parser-containerd
        regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
        output: extract_metadata_from_filepath
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      # Parse Docker format
      - type: json_parser
        id: parser-docker
        output: extract_metadata_from_filepath
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      - type: move
        from: attributes.log
        to: body
      # Extract metadata from file path
      - type: regex_parser
        id: extract_metadata_from_filepath
        regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
        parse_from: attributes["log.file.path"]
      # Rename attributes
      - type: move
        from: attributes.stream
        to: attributes["log.iostream"]
      - type: move
        from: attributes.container_name
        to: attributes["k8s.container.name"]
      - type: move
        from: attributes.namespace
        to: attributes["k8s.namespace.name"]
      - type: move
        from: attributes.pod_name
        to: attributes["k8s.pod.name"]
      - type: move
        from: attributes.restart_count
        to: attributes["k8s.container.restart_count"]
      - type: move
        from: attributes.uid
        to: attributes["k8s.pod.uid"]
  otlp:
    protocols:
      grpc:
      http:
  k8s_cluster:
    collection_interval: 10s
    allocatable_types_to_report: [cpu, memory, ephemeral-storage, storage]
exporters:
  logging:
    loglevel: debug
  otlp/elastic:
    endpoint: "apm-apm-http:8200"
    tls:
      insecure: true
      insecure_skip_verify: true
    headers:
      # Authorization: "Bearer ${secret-token}1"
  elasticsearch:
    endpoints: "https://elasticsearch-es-http:9200"
    index: "logs-generic-k8s-opentele"
    user: elastic
    password: "${elastic}"
    tls:
      ca_file: "/etc/cert-volume/ca.crt"
processors:
  batch:
  memory_limiter:
    # 80% of maximum memory up to 2G
    limit_mib: 400
    # 25% of limit up to 2G
    spike_limit_mib: 100
    check_interval: 5s

  # resourcedetection:
  #   detectors: [env]
  #   timeout: 5s
  #   override: false
      # The k8sattributes in the Agent is in passthrough mode
      # so that it only tags with the minimal info for the
      # collector k8sattributes to complete
  # need app has env OTEL_RESOURCE_ATTRIBUTES or may need resourcedetection, this is wired, OTEL_RESOURCE_ATTRIBUTES must has k8s.pod.ip and k8s.container.name
  k8sattributes:
    passthrough: false
    filter:
      node_from_env_var: KUBE_NODE_NAME
    extract:
      metadata:
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.deployment.name
        - k8s.cluster.name
        - k8s.namespace.name
        - k8s.node.name
        - k8s.pod.start_time
        - container.image.name
        - container.image.tag
        - container.id
    pod_association:
      - from: resource_attribute
        name: k8s.pod.uid
      - from: resource_attribute
        name: k8s.pod.ip
      - from: connection
extensions:
  zpages: {}
  memory_ballast:
    # Memory Ballast size should be max 1/3 to 1/2 of memory.
    size_mib: 165
service:
  extensions: [zpages, memory_ballast]
  telemetry:
    logs:
      level: "debug"
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, k8sattributes]
      exporters: [otlp/elastic]
    # metrics:
    #   receivers: [k8s_cluster]
    #   processors: [batch, resourcedetection, k8sattributes]
    #   exporters: [otlp/elastic]
    logs:
      receivers: [filelog]
      processors: [batch, k8sattributes]
      exporters: [elasticsearch]
