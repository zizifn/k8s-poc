name: "terraform-module"
description: "terraform-module"
inputs:
  TERRAFORM_CLOUD_API_TOKEN:
    description: "TERRAFORM_CLOUD_API_TOKEN"
    required: true
  TURN_SETUP_TERRAFORM:
    description: "SKIP_SETUP_TERRAFORM"
    required: false
    default: "off"
  TERRAFORM_ACTIONS:
    description: "TERRAFORM_ACTIONS apply or destroy"
    required: true
  TERRAFORM_MODULE:
    description: "TERRAFORM_MODULE name"
    required: true
  TERRAFORM_CH_DIR:
    description: "TERRAFORM_CH_DIR name"
    required: false
    default: "/"
  TURN_TF_MASK:
    description: "TERRAFORM_CH_DIR name"
    required: false
    default: "ON"

outputs:
  json_output:
    description: "json outputs"
    value: ${{ steps.terraform_output.outputs.json }}

runs:
  using: "composite"
  steps:
    - name: " install tfmask"
      run: |
        sudo curl -L https://github.com/cloudposse/tfmask/releases/download/0.7.0/tfmask_linux_amd64 --output /usr/bin/tfmask
        sudo chmod +x /usr/bin/tfmask
      shell: bash
    - uses: hashicorp/setup-terraform@v1
      if: ${{ inputs.TURN_SETUP_TERRAFORM == 'ON'}}
      with:
        cli_config_credentials_token: ${{ inputs.TERRAFORM_CLOUD_API_TOKEN }}
        terraform_version: 1.1.9
        # terraform_wrapper: false # add this fix terraform output has extra info
    - name: "setup env and parm"
      id: vars
      run: |
          if [[ ${{ inputs.TURN_TF_MASK}} == 'OFF' ]]; then
            echo "skip tf mask"
          else
            echo "enable tf mask"
            echo TFMASK_CHAR="#" >> $GITHUB_ENV
            echo TFMASK_VALUES_REGEX="(?i)^.*[^a-zA-Z](oauth|ip|secret|token|password|key|result|id|cert|certificate).*$" >> $GITHUB_ENV
            echo TFMASK_RESOURCES_REGEX="(?i)^.*(oci_|id|null_resource|auth-token|k8s-).*$"  >> $GITHUB_ENV
            tfmask=" | tfmask"
            echo "::set-output name=tfmask::$tfmask"
          fi

          echo "TERRAFORM_CH_DIR: ${{inputs.TERRAFORM_CH_DIR}}"
          echo "TERRAFORM_MODULE: ${{inputs.TERRAFORM_MODULE}}"
          if [[ "${{ inputs.TERRAFORM_CH_DIR}}" ]]; then chdir="-chdir=${{ inputs.TERRAFORM_CH_DIR }}"; else echo "no TERRAFORM_CH_DIR"; fi
          echo $chdir
          echo "::set-output name=chdir::$chdir"
          if [[ "${{ inputs.TERRAFORM_MODULE}}" ]]; then target="-target=module.${{ inputs.TERRAFORM_MODULE }}"; else echo "no TERRAFORM_MODULE"; fi
          echo $target
          # echo target=$target >> $GITHUB_ENV
          echo "::set-output name=target::$target"
          echo " chdir ouput ${{steps.vars.outputs.chdir}} "
      shell: bash
    # - name: "output"
    #   run: |

    #   shell: bash
    - name: "Init Terraform"
      id: init
      run: |
        echo "step output chdir is ${{ steps.vars.outputs.chdir }}"
        echo "step output target is ${{ steps.vars.outputs.target }}"
        terraform ${{ steps.vars.outputs.chdir }} init
      shell: bash

    - name: "Validate Terraform"
      id: validate
      run: terraform ${{ steps.vars.outputs.chdir }} validate
      shell: bash

    - name: "Terraform Plan"
      id: plan
      if: ${{ inputs.TERRAFORM_ACTIONS != 'destroy'}}
      run: |
        terraform ${{ steps.vars.outputs.chdir }} plan ${{ steps.vars.outputs.target }} -input=false -no-color -out result ${{ steps.vars.outputs.tfmask }}
      shell: bash

    - name: "Terraform destroy Plan"
      id: destroy-plan
      if: ${{  inputs.TERRAFORM_ACTIONS == 'destroy'}}
      run: terraform ${{ steps.vars.outputs.chdir }} plan -destroy ${{ steps.vars.outputs.target }} -input=false -no-color -out result ${{ steps.vars.outputs.tfmask }}
      shell: bash

    - name: "Terraform Apply"
      id: apply
      if: ${{ inputs.TERRAFORM_ACTIONS != 'plan'}}
      run: terraform ${{ steps.vars.outputs.chdir }} apply  -no-color result ${{ steps.vars.outputs.tfmask }}
      shell: bash

      # change to terraform-bin https://github.com/hashicorp/setup-terraform/issues/20#issuecomment-723853380
    - name: "set env"
      id: terraform_output
      run: |
        temp=$(terraform-bin ${{ steps.vars.outputs.chdir }} output -json)
        # echo $temp
        # echo "::set-output name=json::$temp" # this line has error, because"
        outputValues=$(echo $temp | jq -r '.[]|.value')
        for i in $outputValues; do
          echo ::add-mask::$i
        done
        echo ::set-output name=json::$temp
      shell: bash
