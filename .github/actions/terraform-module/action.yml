name: "terraform-module"
description: "terraform-module"
inputs:
  TERRAFORM_CLOUD_API_TOKEN:
    description: "TERRAFORM_CLOUD_API_TOKEN"
    required: true
  TURN_SETUP_TERRAFORM:
    description: "SKIP_SETUP_TERRAFORM"
    required: false
    default: "off"
  TERRAFORM_ACTIONS:
    description: "TERRAFORM_ACTIONS apply or destroy"
    required: true
  TERRAFORM_MODULE:
    description: "TERRAFORM_MODULE name"
    required: true
  TERRAFORM_CH_DIR:
    description: "TERRAFORM_CH_DIR name"
    required: false
    default: "/"

outputs:
  json_output:
    description: "json outputs"
    value: ${{ steps.output.outputs.json }}
runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v1
      if: ${{ inputs.TURN_SETUP_TERRAFORM == 'ON'}}
      with:
        cli_config_credentials_token: ${{ inputs.TERRAFORM_CLOUD_API_TOKEN }}
        terraform_version: 1.1.9
        terraform_wrapper: false # add this fix terraform output has extra info
    - name: "setup env and parm"
      id: vars
      run: |
          echo "TERRAFORM_CH_DIR: ${{inputs.TERRAFORM_CH_DIR}}"
          echo "TERRAFORM_MODULE: ${{inputs.TERRAFORM_MODULE}}"
          if [[ "${{ inputs.TERRAFORM_CH_DIR}}" ]]; then chdir="-chdir=${{ inputs.TERRAFORM_CH_DIR }}"; else echo "no TERRAFORM_CH_DIR"; fi
          echo $chdir
          echo "::set-output name=chdir::$chdir"
          if [[ "${{ inputs.TERRAFORM_MODULE}}" ]]; then target="-target=module.${{ inputs.TERRAFORM_MODULE }}"; else echo "no TERRAFORM_MODULE"; fi
          echo $target
          # echo target=$target >> $GITHUB_ENV
          echo "::set-output name=target::$target"
      shell: bash
    - name: "output"
      run: |

      shell: bash
    - name: "Init Terraform"
      id: init
      run: |
        echo "step output chdir is ${{ steps.vars.outputs.chdir }}"
        echo "step output target is ${{ steps.vars.outputs.target }}"
        terraform ${{ steps.vars.outputs.chdir }} init
      shell: bash

    - name: "Validate Terraform"
      id: validate
      run: terraform ${{ steps.vars.outputs.chdir }} validate
      shell: bash

    - name: "Terraform Plan"
      id: plan
      if: ${{ inputs.TERRAFORM_ACTIONS != 'destroy'}}
      run: |
        terraform ${{ steps.vars.outputs.chdir }} plan ${{ steps.vars.outputs.target }} -input=false -out result
      shell: bash
    - name: "Terraform destroy Plan"
      id: destroy-plan
      if: ${{  inputs.TERRAFORM_ACTIONS == 'destroy'}}
      run: terraform ${{ steps.vars.outputs.chdir }} plan -destroy ${{ steps.vars.outputs.target }} -input=false -out result
      shell: bash
    - name: "Terraform Apply"
      id: apply
      if: ${{ inputs.TERRAFORM_ACTIONS != 'plan'}}
      run: terraform ${{ steps.vars.outputs.chdir }} apply result
      shell: bash
    - name: "set Terraform output"
      id: output
      run: |
        #  ip1=$(terraform ${{ steps.vars.outputs.chdir }} output -raw ingrss_nginx_lb_ip)
        #  echo $ip1
         temp=$(terraform ${{ steps.vars.outputs.chdir }} output -json)
        #  echo $temp
         echo "::set-output name=json::fromJSON($temp)"
      shell: bash
