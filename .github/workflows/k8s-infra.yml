name: oci-k8s-infra
on:
  workflow_dispatch:
    inputs:
      actions:
        description: "action: plan/apply/destroy"
        default: "plan"
        required: true
      turn_k8s_base_app:
        description: "turn_k8s_base_app OFF/ON"
        default: "OFF"
        required: true
      TURN_TF_MASK:
        description: "TURN_TF_MASK name OFF/ON"
        required: true
        default: "ON"
defaults:
  run:
    shell: bash
    # working-directory: ./k8s-infra

jobs:
  oci-k8s-infra:
    name: "oci-infra"
    runs-on: ubuntu-latest
    env:
      TF_VAR_tenancy_ocid: ${{secrets.OCI_TENANCY_OCID}}
      TF_VAR_compartment_id: ${{secrets.OCI_COMPARTMENT_OCID}}
      TF_VAR_user_ocid: ${{secrets.OCI_USER_OCID}}
      TF_VAR_private_key_password: ${{secrets.OCI_PASSPHRASE}}
      TF_VAR_private_key: ${{secrets.OCI_KEY_FILE_BASE64}}
      TF_VAR_fingerprint: ${{secrets.OCI_FINGERPRINT}}
      TF_VAR_region: ${{secrets.OCI_REGION}}
      TF_VAR_cloudflare_api_token: ${{secrets.K8S_CLOUDFLARE_API_TOKEN}}
      TF_VAR_letsencrypt_email: ${{secrets.K8S_LETSENCRYPT_EMAIL}}
      # TF_VAR_ingrss_nginx_lb_ip: ${{secrets.OCI_K8S_INGRSS_NGINX_LB_IP}}
      # TF_VAR_trun_k8s_init_app: ${{github.event.inputs.}}
      OCI_K8S_CONFIG: ${{secrets.OCI_K8S_CONFIG}}

      # # tfmask
      # TFMASK_CHAR: "#"
      # TFMASK_VALUES_REGEX: "(?i)^.*[^a-zA-Z](oauth|secret|token|password|key|result|id).*$"

    steps:
      - uses: actions/checkout@v2
      - name: "set oci and k8s"
        if: ${{github.event.inputs.turn_k8s_base_app == 'ON'}}
        id: oci_cli_k8s
        uses: ./.github/actions/oci-cli-k8s
        with:
          k8s_config: ${{secrets.OCI_K8S_CONFIG}}
          user: ${{secrets.OCI_USER_OCID}}
          fingerprint: ${{secrets.OCI_FINGERPRINT}}
          region: ${{secrets.OCI_REGION}}
          tenancy: ${{secrets.OCI_TENANCY_OCID}}
          key_file: ${{secrets.OCI_KEY_FILE}}
          pass_phrase: ${{secrets.OCI_PASSPHRASE}}
      - name: "echo input"
        run: |
          echo "actions: ${{github.event.inputs.actions}}"
          echo "turn_k8s_base_app: ${{github.event.inputs.turn_k8s_base_app}}"
          touch oci_kube_config.temp

      - name: "Terraform setup vcn and infra"
        id: k8s_infra
        uses: ./.github/actions/terraform-module
        continue-on-error: false
        with:
          TERRAFORM_CLOUD_API_TOKEN: ${{secrets.TERRAFORM_CLOUD_API_TOKEN}}
          TURN_SETUP_TERRAFORM: 'ON'
          TERRAFORM_ACTIONS: ${{github.event.inputs.actions}}
          TERRAFORM_CH_DIR: "k8s-infra"
          TURN_TF_MASK: ${{github.event.inputs.TURN_TF_MASK}}

      - name: "add output mask"
        run: |
            echo "ddd"
        shell: bash
      - name: "setup k8s base apps k8s-base-crds"
        id: k8s_base_app_cert_manager_crds
        uses: ./.github/actions/terraform-module
        if: ${{github.event.inputs.turn_k8s_base_app == 'ON'}}
        with:
          TERRAFORM_CLOUD_API_TOKEN: ${{secrets.TERRAFORM_CLOUD_API_TOKEN}}
          TURN_SETUP_TERRAFORM: 'ON'
          TERRAFORM_ACTIONS: ${{github.event.inputs.actions}}
          TERRAFORM_CH_DIR: "k8s-base-apps"
          TERRAFORM_MODULE: "k8s-base-crds"
          TURN_TF_MASK: ${{github.event.inputs.TURN_TF_MASK}}
        env:
          TF_VAR_nsg_common_internet_access_id: ${{ fromJSON(steps.k8s_infra.outputs.json_output).nsg_common_internet_access_id.value }}
          TF_VAR_ingrss_nginx_lb_ip: ${{ fromJSON(steps.k8s_infra.outputs.json_output).ingrss_nginx_lb_ip.value }}

      - name: "setup k8s base apps"
        id: k8s_base_app
        uses: ./.github/actions/terraform-module
        if: ${{github.event.inputs.turn_k8s_base_app == 'ON'}}
        with:
          TERRAFORM_CLOUD_API_TOKEN: ${{secrets.TERRAFORM_CLOUD_API_TOKEN}}
          TURN_SETUP_TERRAFORM: 'ON'
          TERRAFORM_ACTIONS: ${{github.event.inputs.actions}}
          TERRAFORM_CH_DIR: "k8s-base-apps"
          TURN_TF_MASK: ${{github.event.inputs.TURN_TF_MASK}}
        env:
          TF_VAR_nsg_common_internet_access_id: ${{ fromJSON(steps.k8s_infra.outputs.json_output).nsg_common_internet_access_id.value }}
          TF_VAR_ingrss_nginx_lb_ip: ${{ fromJSON(steps.k8s_infra.outputs.json_output).ingrss_nginx_lb_ip.value }}

